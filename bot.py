import requests
import time
import os

url_base = "https://p2a-gateway.up.railway.app"
log_file = "quest_log.txt"

# H√†m nh·∫≠n ph·∫ßn th∆∞·ªüng
def claim(headers):
    url = f"{url_base}/api/v1/compute-units/user/interval-rewards/claim"
    response = requests.post(url, headers=headers)

    if response.status_code == 401:
        print("‚ö†Ô∏è Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        return False

    if response.status_code == 200:
        data = response.json()
        if data.get("success", False):
            print("‚úÖ Checkin th√†nh c√¥ng!")
            return True
        else:
            print("‚ùå Checkin th·∫•t b·∫°i:", data)
            return False
    else:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng:", response.status_code, response.text)
        return False

# L·∫•y questId t·ª± ƒë·ªông t·ª´ API ho·∫∑c t·ª´ file log
def load_quests(headers):
    if os.path.exists(log_file):
        with open(log_file, "r") as f:
            quests = [{"questionId": line.strip(), "thumbsUp": True} for line in f if line.strip()]
        print(f"üìå ƒê√£ load {len(quests)} questId t·ª´ file log.")
        return quests

    url = f"{url_base}/api/v1/quest/user/thumbs-questions/daily"
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 401:
            print("‚ö†Ô∏è Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá (khi l·∫•y quest).")
            return []
        if response.status_code == 200:
            data = response.json()
            quests = []
            questions = data.get("data", {}).get("questions", [])
            with open(log_file, "w") as f_log:
                for q in questions:
                    questionId = q.get("id")
                    if questionId:
                        quests.append({"questionId": questionId, "thumbsUp": True})
                        f_log.write(questionId + "\n")
            print(f"üìå L·∫•y {len(quests)} questId t·ª´ API v√† l∆∞u v√†o file log.")
            return quests
        else:
            print("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c quest t·ª´ API:", response.status_code, response.text)
            return []
    except Exception as e:
        print("‚ùå L·ªói khi g·ªçi API quest:", e)
        return []

# H√†m l√†m nhi·ªám v·ª•
def task(headers, questionId, thumbsUp):
    url = f"{url_base}/api/v1/quest/user/thumbs-questions/answer"
    payload = {"questionId": questionId, "thumbsUp": thumbsUp}
    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 401:
        print(f"‚ö†Ô∏è Token h·∫øt h·∫°n khi l√†m nhi·ªám v·ª• {questionId}.")
        return

    data = response.json()
    if response.status_code == 200 and data.get("success", False):
        print(f"üéØ Nhi·ªám v·ª• {questionId} ho√†n th√†nh.")
    else:
        print(f"‚ùå L·ªói khi l√†m nhi·ªám v·ª• {questionId}: {data}")

# Ch·∫°y cho 1 token
def chay_cho_mot_token(token, idx):
    headers = {
        "Authorization": "Bearer " + token.strip(),
        "Content-Type": "application/json"
    }
    print(f"\nüîë ƒêang ch·∫°y cho t√†i kho·∫£n {idx+1}...")

    # Nh·∫≠n th∆∞·ªüng
    if not claim(headers):
        print(f"‚è© B·ªè qua t√†i kho·∫£n {idx+1} do token kh√¥ng h·ª£p l·ªá.")
        return

    # L·∫•y questId t·ª´ file log ho·∫∑c API
    quests = load_quests(headers)

    # Th·ª±c hi·ªán nhi·ªám v·ª• v·ªõi delay 4s m·ªói quest
    for q in quests:
        task(headers, q["questionId"], q["thumbsUp"])
        time.sleep(4)

# H√†m ch√≠nh
def main():
    with open("tokens.json", "r") as f:
        tokens = f.readlines()

    for idx, token in enumerate(tokens):
        try:
            chay_cho_mot_token(token, idx)
            time.sleep(3)  # ngh·ªâ 3s gi·ªØa c√°c account
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói v·ªõi token {idx+1}: {e}")

# Run
if __name__ == "__main__":
    try:
        while True:
            main()
            print("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ t√†i kho·∫£n, ch·ªù 24h tr∆∞·ªõc khi ch·∫°y l·∫°i...")
            time.sleep(60 * 60 * 24)
    except KeyboardInterrupt:
        print("‚èπÔ∏è D·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
