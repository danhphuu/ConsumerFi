import requests
import time

url_base = "https://p2a-gateway.up.railway.app"

# H√†m nh·∫≠n ph·∫ßn th∆∞·ªüng
def claim(headers):
    url = f"{url_base}/api/v1/compute-units/user/interval-rewards/claim"
    response = requests.post(url, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        if data.get("success", False):
            print("Checkin th√†nh c√¥ng:")
        else:
            print("Checkin th·∫•t b·∫°i:")
    else:
        print("Kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng:", response.status_code, response.text)

# Danh s√°ch c√°c c√¢u h·ªèi c·∫ßn l√†m nhi·ªám v·ª•
question_list = [
    {"questionId": "cmel5sklx02sfo83xx8vs5snf", "thumbsUp": True},
    {"questionId": "cmel5se7702reo83xi1vofov5", "thumbsUp": True},
    {"questionId": "cmel5r5yu02nto83x582u70yk", "thumbsUp": True},
    {"questionId": "cmel5qx2602noo83xesoh5nkn", "thumbsUp": True},
    {"questionId": "cmel658p003kro83xl0hy9sha", "thumbsUp": True},
    {"questionId": "cmel64qc203k3o83xm8x6ib9y", "thumbsUp": True},
    {"questionId": "cmel64c9q015umg3x7f3muc5z", "thumbsUp": True},
    {"questionId": "cmel63yby03ioo83x3d2bvjuc", "thumbsUp": True},
    {"questionId": "cmel62xg403gno83xbtpfm55o", "thumbsUp": True},
    {"questionId": "cmel62j7z03g2o83xdyc8i4sk", "thumbsUp": True},
]

# H√†m l√†m nhi·ªám v·ª• (tr·∫£ l·ªùi c√¢u h·ªèi b·∫±ng c√°ch b·∫•m Like/Dislike)
def task(headers, questionId, thumbsUp):
    url = f"{url_base}/api/v1/quest/user/thumbs-questions/answer"
    payload = {
        "questionId": questionId,
        "thumbsUp": thumbsUp
    }
    response = requests.post(url, headers=headers, json=payload)
    data = response.json()
    if response.status_code == 200 and response.json().get("success", False):
        print(f"Nhi·ªám v·ª• cho c√¢u h·ªèi {questionId} ho√†n th√†nh th√†nh c√¥ng.")
    else:
        error_message = data.get( "L·ªói kh√¥ng x√°c ƒë·ªãnh")
        print(f"{error_message}")

# H√†m x·ª≠ l√Ω cho m·ªôt token (1 t√†i kho·∫£n)
def chay_cho_mot_token(token, idx):
    headers = {
        "Authorization": "Bearer " + token.strip(),  # Th√™m "Bearer" t·ª± ƒë·ªông
        "Content-Type": "application/json"
    }  
    print(f"\nüîë ƒêang ch·∫°y cho t√†i kho·∫£n {idx+1}...")
    # Nh·∫≠n th∆∞·ªüng
    claim(headers)
    
    # Th·ª±c hi·ªán c√°c nhi·ªám v·ª• trong danh s√°ch c√¢u h·ªèi
    for question in question_list:
        task(headers, question["questionId"], question["thumbsUp"])

# H√†m ch√≠nh, ch·∫°y cho nhi·ªÅu token t·ª´ file tokens.json
def main():
    with open("tokens.json", "r") as f:
        tokens = f.readlines()

    for idx, token in enumerate(tokens):
        try:
            chay_cho_mot_token(token, idx)
            time.sleep(3)  # ngh·ªâ 3 gi√¢y gi·ªØa c√°c t√†i kho·∫£n (t√πy ch·ªçn)
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói v·ªõi token {idx+1}: {e}")

# Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh
if __name__ == "__main__":
    try:
        while True:
            main()
            print("\n‚úÖ Ho√†n th√†nh cho t·∫•t c·∫£ t√†i kho·∫£n, ch·ªù 24 gi·ªù tr∆∞·ªõc khi ch·∫°y l·∫°i...")
            time.sleep(60 * 60 * 24)  # ch·ªù 24 gi·ªù
    except KeyboardInterrupt:
        print("‚èπÔ∏è Ch∆∞∆°ng tr√¨nh ƒë√£ b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
    except Exception as e:
        print(f"‚ùå ƒê√£ x·∫£y ra l·ªói: {e}")
